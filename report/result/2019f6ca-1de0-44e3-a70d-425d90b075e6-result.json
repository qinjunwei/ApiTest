{"name": "test_api[data19]", "status": "failed", "statusDetails": {"message": "AssertionError: assert '请求成功hhhh' in '请求成功!'", "trace": "data = {'id': 'sbq_019', 'section': 'message', '保存数据': '{\"data\":[[\"records\"],[\"classesId\",\"skuId\",\"courseId\",\"resourceId\"]]}', '域名': 'https://api-tiyan.sibuqu.com', ...}\n\n    @pytest.mark.parametrize('data',cases)\n    def test_api(data):\n    \n        parames_dict = {}\n        headers_dict = {}\n        # 重新设置请求头信息\n        headers = data[ExcelVarles.case_headers]\n        if len(headers) > 0:\n            headers_dict: dict = json.loads(headers)\n            if headers_dict.get(\"Authorization\") == \"${token}\":\n                headers_dict[\"Authorization\"] = oi.getData(\"token\")\n            else:\n                # TODO:检查用例中请求头\n                pass\n    \n        # 拼接参数\n        parames = data[ExcelVarles.case_data]\n        if len(parames) > 0 and \"{\" in parames:\n            parames_dict: dict = json.loads(parames)\n            if parames_dict.get(\"id\") == \"${userId}\":\n                parames_dict[\"id\"] = oi.getData(\"id\")\n            if parames_dict.get(\"token\") == \"${token}\":\n                parames_dict[\"token\"] = oi.getData(\"token\")\n            if parames_dict.get(\"phone\") == \"${phone}\":\n                parames_dict[\"phone\"] = oi.getData(\"phone\")\n            if parames_dict.get(\"userFullName\") == \"${randomName}\":\n                parames_dict[\"userFullName\"] = rd.randomName()\n    \n        delay = data[ExcelVarles.case_delay]\n        save_datas = data[ExcelVarles.case_saveData]\n        apiName = data[ExcelVarles.case_apiName]\n        request_method = data[ExcelVarles.case_method]\n        isRun = data[ExcelVarles.case_isRun]\n        check_points = data[ExcelVarles.case_checkPoint].split(\":\")\n        host = data[ExcelVarles.case_host]\n        url_path = data[ExcelVarles.case_url]\n        url = host + url_path\n    \n        # MyLog.info(\"请求数据---url---{}\\t---header---{}\\t---method---{}\\t---params---{}\".format(url, headers_dict, request_method, parames_dict))\n    \n        if isRun == \"yes\":\n            resDict = api.request_main(method=request_method,url=url,data=parames_dict,headers=headers_dict)\n            MyLog.info(\"\\n---接口名称-{}\\n---响应数据---{}\".format(apiName,resDict))\n    \n            if delay == \"yes\":\n                sleep(1)\n    \n            if len(save_datas) > 1:\n                section = data[ExcelVarles.case_section]\n                try:\n                    saves(datas=save_datas,resDict=resDict,section=section)\n                except Exception as e:\n                    MyLog.error(\"数据保存报错，比对用例表中‘保存数据’内容与响应结果的差别。\\n保存报错信息--{}\\n请求响应数据内容--{}\".format(e, resDict))\n>           assert check_points[1] in resDict[check_points[0]]\nE           AssertionError: assert '请求成功hhhh' in '请求成功!'\n\ntests\\test_case.py:69: AssertionError"}, "attachments": [{"name": "log", "source": "fe0daa88-503a-4887-9f08-8ed92fc09f90-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "{'id': 'sbq_019', '接口名称': 'app-评论和回复消息列表', '域名': 'https://api-tiyan.sibuqu.com', '接口地址': '/appcommon/message/queryMessageList', '请求方式': 'post', '请求头': '{\"content-type\": \"application/json\",\"charset\": \"UTF-8\", \"Authorization\": \"${token}\"}', '请求参数': '{\"pushType\": 3,\"pageNum\": 1,\"pageSize\": 10}', '检查点': 'msg:请求成功hhhh', '保存数据': '{\"data\":[[\"records\"],[\"classesId\",\"skuId\",\"courseId\",\"resourceId\"]]}', 'section': 'message', '是否执行': 'yes', '请求延迟': ''}"}], "start": 1658819176100, "stop": 1658819176200, "uuid": "4501e616-29f3-4f99-b3c5-76216881bbad", "historyId": "beb3244b573fea207bed0162cbc10ae7", "testCaseId": "52fe017361a490e4aa7005589beabcbe", "fullName": "tests.test_case#test_api", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_case"}, {"name": "host", "value": "QinJumWei"}, {"name": "thread", "value": "13908-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_case"}]}